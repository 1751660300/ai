1.线性模型
    1 2 3 4 5 . . .
    4 5 6 7 8 . . .
    什么是线性关系：就是变量之间存在一元函数关系，就称他们有线性关系。
    如上面两排数列之间得关系，y = kx + b
2.线性预测
    假设一组数据符合一种线性规律，那么就可以预测未来出现得数据
    如上面的数据，可以根据线性关系得出6对应的数
3.解矩阵方程
    为什么要使用矩阵？
    计算机无法对方程组进行求解，当方程组写成矩阵方程的时候，计算机就可以解出来结果

    A * B = C  矩阵ABC中AC是已知的矩阵，如何求解矩阵B
    B = numpy.linalg.lstsq(A, C)
4.线性拟合
    线性拟合可以寻求与一组散点走向趋势规律相适应的线性表达式方程
    如果方程组多余元数，使用下面的方法可以求得最优解，就是最拟合的线性方程的参数
    B = numpy.linalg.lstsq(A, C)
5.协方差，相关矩阵，相关系数
    通过两组数据统计计算而得的协方差可以估计这两组数据的相似程度

    样本：A = [a1, a2, a3, ...]
        B = [b1, b2, b3, ...]

    平均值：numpy.mean()
    avg_a = (a1 + a2 + a3 +...+ an)/n
    avg_b = (b1 + b2 + b3 +...+ bn)/n

    离差：(用每一个元素减去平均值，就求的数据的误差程度)
    dev_a = A - avg_a
    dev_b = B - avg_b

    协方差：可以反映两组统计样本的相关性，值为正，则为正相关，为负，则为负相关，绝对值越大则相关性越强
    （两组数据的离差对应元素相乘，在相加）
    cov_ab = (dev_a * dev_b).sum() / n
    cov_ba = (dev_b * dev_a).sum() / n
6.相关系数
    协方差除去两组样本的标准差的乘积是一个[-1, 1]之间的数，该结果表明两组样本的相关性

    标准差：
    std_a = numpy.sqrt(dev_a ** 2 / n) = A.std()
    std_b = numpy.sqrt(dev_b ** 2 / n) = B.std()

    a样本与b样本之间的相系数
    cov_ab / (std_a * std_b)

    b样本与a样本之间的相系数
    cov_ba / (std_b * std_a)

    若相关系数等于0，则表示不相关
    若相关系数越接近与1，则表示正相关性越强
    若相关系数越接近与-1，则表示负相关性越强
7.相关矩阵
    | cov_aa/(std_a*std_a) cov_ab/(std_a*std_b) |
    | cov_ba/(std_b*std_a) cov_bb/(std_b*std_b) |

    对角线上为同组样本自己相比绝对相关
    相关矩阵 = numpy.corrcoef(a, b)

    相关矩阵的分子矩阵,(矩阵与矩阵之间的协方差)
    | aa协方差 ab协方差 |
    | ba协方差 bb协方差 |
    numpy.cov(a, b)
8.协方差应用
    可以根据相似度来为用户推荐相关的电影，广告，。。。
9.多项式拟合
    多项式的一般形式：y = p0 * x ** n + p1 * x ** (n - 1) + ... + pn

    多项式拟合的目的是为了找到一组p0 - pn, 使得拟合方程尽可能与实例样本数据相符合
    假设拟合方程如下：
    f(x) = p0 * x ** n + p1 * x ** (n - 1) + ... + pn
    则拟合函数与真实结果方差如下：
    loss = (y1 - f(x1)) ** 2 + (y2 - f(x2)) ** 2 + (y3 - f(x3)) ** 2 + ...
    那么拟合多项式的过程就是求得一组p0 - pn，使得loss最小

    x = [x1, x2, x3, ..., xn]  自变量
    y = [y1, y2, y3, ..., yn]  实际函数值
    y’ = [y1‘, y2’, y3‘, ..., yn’]  拟合函数值
    p = [p0, p1, p2, p3, ..., pn]  多项式系数

    根据一组样本，并给出最高次幂，求出拟合多项式系数
    numpy.polyfit(x, y, 最高次幂) -> p

    根据拟合系数合自变量求出拟合值
    numpy.polyval(p, x) -> y'

    多项式求导，根据拟合系数求出多项式函数导函数的的系数
    numpy.polyder(p) -> Q

    已知多项式系数Q，求多项式函数的根（与x轴交点的横坐标）
    xs = numpy.roots(Q)

    两个多项式函数的差函数的系数（可以根据差函数的根求两个曲线的交点）
    Q = numpy.polysub(p1, p2)

